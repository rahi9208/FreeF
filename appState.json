{"EDITOR_STATE":{"allProjectFiles":{"1699a970-0712-4f82-ba11-e885fa47a8bc":{"id":"1699a970-0712-4f82-ba11-e885fa47a8bc","parent":null,"name":"FreeF","type":"DIRECTORY","isDirectory":true,"children":["a046149a-d8c9-4997-ad68-245f26ca477f"],"isRemovable":false,"filePath":"FreeF"},"a046149a-d8c9-4997-ad68-245f26ca477f":{"id":"a046149a-d8c9-4997-ad68-245f26ca477f","parent":"1699a970-0712-4f82-ba11-e885fa47a8bc","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"FreeF/lambda.js","code":"let AWS = require('aws-sdk');\nlet axios = require('axios2');\n\nconst baseUrl = \"https://private-anon-1b3fb5589e-quotationsearchapi.apiary-mock.com/\";\n\nexports.handler = function (event, context, callback) {\n\n\t//create application\n\taxios.post(`${baseUrl}applications`, event)\n\t\t.then(resp => {\n\t\t\tconsole.log(\"Successfully recieved response\", resp.data);\n\t\t\tif (resp.data.ApplicationId) {\n\t\t\t\tconsole.log(\"Application created, Creating application decision for %s...\",resp.data.ApplicationId);\n\t\t\t\treturn axios.post(`${baseUrl}applications/${resp.data.ApplicationId}/decisions`, {});\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected payload in step 1\");\n\t\t\t}\n\t\t}).then(decisionResponse => {\n\t\t\tconsole.log(\"Decision response recieved\", decisionResponse.data);\n\t\t\tcallback(null, decisionResponse.data);\n\t\t}).catch(err => {\n\t\t\tconsole.error(\"Error in creating new pllication\", err);\n\t\t\tcallback(err, null);\n\t\t})\n}\n\nasync function fetchApplicationDecision(url, maxRetries) {\n\tlet currentRetries = 0;\n\twhile (currentRetries < maxRetries) {\n\t\tconsole.log(\"Retrying for the\", currentRetries, \"time\");\n\t\tlet resp = await doDecisionCall(url, 10000);\n\t\tif (resp.data.Status === \"Approved\") {\n\t\t\treturn resp.data.Status;\n\t\t}\n\t\tcurrentRetries++;\n\t}\n\tthrow new Error(\"Failed to retrieve decision after \" + maxRetries + \" retires\");\n}\n\nfunction doDecisionCall(url, delay) {\n\tnew Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\taxios.get(url).then(resolve).catch(reject);\n\t\t}, delay);\n\t});\n}","triggers":[{"resourceName":"apigusEast1FreedomFpost","config":{}}],"config":{"memory":128,"timeout":60,"runtime":"nodejs8.10"},"version":122,"syncVersion":348,"testCases":{"80153627-e7c4-4b31-b2c8-049f88acb987":{"id":"80153627-e7c4-4b31-b2c8-049f88acb987","name":"TestCreate","functionId":"a046149a-d8c9-4997-ad68-245f26ca477f","event":"{\n    \"LoanAmount\" : 1000,\n    \"LoanTerm\" : 12,\n    \"LoanPurpose\" : \"HomeImprovement\",\n    \"Title\" : \"Dr\",\n    \"FirstName\" : \"Ken\",\n    \"LastName\" : \"Kendrix\",\n    \"DateOfBirth\": \"1970-01-15\",\n    \"EmailAddress\" : \"dev@sequensis.co.uk\",\n    \"MobilePhoneNumber\" : \"07123445567\",\n    \"HomePhoneNumber\" : \"01159123456\",\n    \"CurrentAddress\" : {\n        \"Flat\" : \"Flat\",\n        \"HouseName\" : \"HouseName\",\n        \"HouseNumber\" : \"156\",\n        \"Street\" : \"A Street\",\n        \"Street2\" : \"A Street 2\",\n        \"TownOrCity\" : \"Nottingham\",\n        \"District\" : \"The District\",\n        \"County\" : \"Nottinghamshire\",\n        \"Postcode\" : \"NG2 1AG\",\n        \"MovedInAt\": \"2010-01-01\",\n        \"ResidentialStatus\" : \"LivingWithParents\"\n    },\n    \"PreviousAddress\" : {\n        \"Flat\" : \"Flat\",\n        \"HouseName\" : \"HouseName\",\n        \"HouseNumber\" : \"210\",\n        \"Street\" : \"Another Street\",\n        \"Street2\" : \"Another Street 2\",\n        \"TownOrCity\" : \"Derby\",\n        \"District\" : \"The District\",\n        \"County\" : \"Derbyshire\",\n        \"Postcode\" : \"DE2 1AG\",\n        \"MovedInAt\" : \"2007-01-20\",\n        \"MovedOutAt\" : \"2009-12-31\"\n    },\n    \"EmploymentStatus\" : \"Retired\",\n    \"GrossAnnualIncome\" : 100000,\n    \"MonthlyExpenditure\" : 500,\n    \"BankAccountOpenedAt\" : {\n        \"Month\" : 9,\n        \"Year\" : 2005\n    },\n    \"SourceId\" : \"ABC123\",\n    \"Tracking\" : {\n        \"Source\" : \"Source\",\n        \"Medium\" : \"Medium\",\n        \"Campaign\" : \"Campaign\",\n        \"Content\" : \"Content\"\n    },\n    \"IpAddress\" : \"192.168.0.1\",\n    \"UserAgentString\" : \"Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\"\n}"}},"references":[]}},"rootNode":"1699a970-0712-4f82-ba11-e885fa47a8bc","openFiles":["a046149a-d8c9-4997-ad68-245f26ca477f"],"currentFileId":"a046149a-d8c9-4997-ad68-245f26ca477f","resources":{"apigusEast1FreedomFpost":{"name":"apigusEast1FreedomFpost","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":0,"apiName":"FreedomF","endpointType":"EDGE","resourceMode":0,"resourceName":"","resourcePath":"/","restMethod":"POST","proxyIntegration":false,"enableCORS":false,"stageMode":0,"stageName":"staging"},"globallyEditable":true}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"axios2":{"name":"axios2","downloadsLast30Days":58,"downloadsRatio":2.410116623428322e-7,"humanDownloadsLast30Days":"58","popular":false,"version":"0.15.4","versions":{"0.15.3":"2017-03-22T14:45:50.526Z","0.15.4":"2017-03-23T02:40:28.094Z"},"tags":{"latest":"0.15.4"},"description":"Promise based HTTP client for the browser and node.js","dependencies":{"clone":"^2.1.1","follow-redirects":"1.0.0"},"devDependencies":{"coveralls":"^2.11.9","es6-promise":"^4.0.5","grunt":"^1.0.1","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.0.0","grunt-contrib-nodeunit":"^1.0.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^19.0.0","grunt-karma":"^2.0.0","grunt-ts":"^6.0.0-beta.3","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^1.3.0","karma-chrome-launcher":"^2.0.0","karma-coverage":"^1.0.0","karma-firefox-launcher":"^1.0.0","karma-jasmine":"^1.0.2","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-phantomjs-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.1.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","phantomjs-prebuilt":"^2.1.7","sinon":"^1.17.4","webpack":"^1.13.1","webpack-dev-server":"^1.14.1","url-search-params":"^0.6.1","typescript":"^2.0.3"},"repository":{"url":"https://github.com/mzabriskie/axios","project":"axios","user":"mzabriskie","host":"github.com","path":"","head":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8","branch":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8"},"githubRepo":{"user":"mzabriskie","project":"axios","path":"","head":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8"},"gitHead":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8","readme":"# axios\n\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![build status](https://img.shields.io/travis/mzabriskie/axios.svg?style=flat-square)](https://travis-ci.org/mzabriskie/axios)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](http://npm-stat.com/charts.html?package=axios)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square)](https://gitter.im/mzabriskie/axios)\n\nPromise based HTTP client for the browser and node.js\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest â | Latest â | Latest â | Latest â | Latest â | 8+ â |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing cdn:\n\n```html\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n## Example\n\nPerforming a `GET` request\n\n```js\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### axios.all(iterable)\n##### axios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nvar instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // The last function in the array must return a string, an ArrayBuffer, FormData, or a Stream\n  transformRequest: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000,\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content allowed\n  maxContentLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows to configure options like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' defines the hostname and port of the proxy server\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing `Proxy-Authorization` custom headers you have set using `headers`.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the headers that the server responded with\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nvar instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in `lib/defaults.js`, then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nvar instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you may need to remove an interceptor later you can.\n\n```js\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nvar instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n## Handling Errors\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made, but the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nYou can define a custom HTTP status code error range using the `validateStatus` config option.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\n```\n\n## Cancellation\n\nYou can cancel a request using a *cancel token*.\n\n> The axios cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nvar CancelToken = axios.CancelToken;\nvar cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> Note: you can cancel several requests with the same cancel token.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params); \n```\n\n> Note that `URLSearchParams` is not supported by all browsers, but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n### Node.js\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nvar querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the `qs` library.\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\naxios includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n## Resources\n\n* [Changelog](https://github.com/mzabriskie/axios/blob/master/CHANGELOG.md)\n* [Upgrade Guide](https://github.com/mzabriskie/axios/blob/master/UPGRADE_GUIDE.md)\n* [Ecosystem](https://github.com/mzabriskie/axios/blob/master/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/mzabriskie/axios/blob/master/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/mzabriskie/axios/blob/master/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\nMIT\n","owner":{"name":"mzabriskie","avatar":"https://github.com/mzabriskie.png","link":"https://github.com/mzabriskie"},"deprecated":false,"homepage":null,"license":"MIT","keywords":["xhr","http","ajax","promise","node"],"computedKeywords":[],"computedMetadata":{},"created":1490193950526,"modified":1515720687006,"lastPublisher":{"name":"torworx","email":"torworx@gmail.com","avatar":"https://gravatar.com/avatar/c8ea71a3c689dc1971a160dbd169d829","link":"https://www.npmjs.com/~torworx"},"owners":[{"email":"torworx@gmail.com","name":"bitt","avatar":"https://gravatar.com/avatar/c8ea71a3c689dc1971a160dbd169d829","link":"https://www.npmjs.com/~bitt"}],"lastCrawl":"2018-07-19T11:44:59.576Z","_searchInternal":{"concatenatedName":"axios2","alternativeNames":["axios2","axios2","axios2"],"downloadsMagnitude":2},"dependents":0,"humanDependents":"0","changelogFilename":"https://raw.githubusercontent.com/mzabriskie/axios/67c9e42973c90ed1fe3ac5274a355d94cf399bb8/CHANGELOG.md","objectID":"axios2","_highlightResult":{"name":{"value":"<em>axios</em>2","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]},"humanDownloadsLast30Days":{"value":"58","matchLevel":"none","matchedWords":[]},"version":{"value":"0.15.4","matchLevel":"none","matchedWords":[]},"versions":{"0.15.3":{"value":"2017-03-22T14:45:50.526Z","matchLevel":"none","matchedWords":[]},"0.15.4":{"value":"2017-03-23T02:40:28.094Z","matchLevel":"none","matchedWords":[]}},"tags":{"latest":{"value":"0.15.4","matchLevel":"none","matchedWords":[]}},"description":{"value":"Promise based HTTP client for the browser and node.js","matchLevel":"none","matchedWords":[]},"dependencies":{"clone":{"value":"^2.1.1","matchLevel":"none","matchedWords":[]},"follow-redirects":{"value":"1.0.0","matchLevel":"none","matchedWords":[]}},"devDependencies":{"coveralls":{"value":"^2.11.9","matchLevel":"none","matchedWords":[]},"es6-promise":{"value":"^4.0.5","matchLevel":"none","matchedWords":[]},"grunt":{"value":"^1.0.1","matchLevel":"none","matchedWords":[]},"grunt-banner":{"value":"^0.6.0","matchLevel":"none","matchedWords":[]},"grunt-cli":{"value":"^1.2.0","matchLevel":"none","matchedWords":[]},"grunt-contrib-clean":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"grunt-contrib-nodeunit":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"grunt-contrib-watch":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"grunt-eslint":{"value":"^19.0.0","matchLevel":"none","matchedWords":[]},"grunt-karma":{"value":"^2.0.0","matchLevel":"none","matchedWords":[]},"grunt-ts":{"value":"^6.0.0-beta.3","matchLevel":"none","matchedWords":[]},"grunt-webpack":{"value":"^1.0.18","matchLevel":"none","matchedWords":[]},"istanbul-instrumenter-loader":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"jasmine-core":{"value":"^2.4.1","matchLevel":"none","matchedWords":[]},"karma":{"value":"^1.3.0","matchLevel":"none","matchedWords":[]},"karma-chrome-launcher":{"value":"^2.0.0","matchLevel":"none","matchedWords":[]},"karma-coverage":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"karma-firefox-launcher":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"karma-jasmine":{"value":"^1.0.2","matchLevel":"none","matchedWords":[]},"karma-jasmine-ajax":{"value":"^0.1.13","matchLevel":"none","matchedWords":[]},"karma-opera-launcher":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"karma-phantomjs-launcher":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"karma-safari-launcher":{"value":"^1.0.0","matchLevel":"none","matchedWords":[]},"karma-sauce-launcher":{"value":"^1.1.0","matchLevel":"none","matchedWords":[]},"karma-sinon":{"value":"^1.0.5","matchLevel":"none","matchedWords":[]},"karma-sourcemap-loader":{"value":"^0.3.7","matchLevel":"none","matchedWords":[]},"karma-webpack":{"value":"^1.7.0","matchLevel":"none","matchedWords":[]},"load-grunt-tasks":{"value":"^3.5.2","matchLevel":"none","matchedWords":[]},"minimist":{"value":"^1.2.0","matchLevel":"none","matchedWords":[]},"phantomjs-prebuilt":{"value":"^2.1.7","matchLevel":"none","matchedWords":[]},"sinon":{"value":"^1.17.4","matchLevel":"none","matchedWords":[]},"webpack":{"value":"^1.13.1","matchLevel":"none","matchedWords":[]},"webpack-dev-server":{"value":"^1.14.1","matchLevel":"none","matchedWords":[]},"url-search-params":{"value":"^0.6.1","matchLevel":"none","matchedWords":[]},"typescript":{"value":"^2.0.3","matchLevel":"none","matchedWords":[]}},"repository":{"url":{"value":"https://github.com/mzabriskie/<em>axios</em>","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]},"project":{"value":"<em>axios</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["axios"]},"user":{"value":"mzabriskie","matchLevel":"none","matchedWords":[]},"host":{"value":"github.com","matchLevel":"none","matchedWords":[]},"path":{"value":"","matchLevel":"none","matchedWords":[]},"head":{"value":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8","matchLevel":"none","matchedWords":[]},"branch":{"value":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8","matchLevel":"none","matchedWords":[]}},"githubRepo":{"user":{"value":"mzabriskie","matchLevel":"none","matchedWords":[]},"project":{"value":"<em>axios</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["axios"]},"path":{"value":"","matchLevel":"none","matchedWords":[]},"head":{"value":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8","matchLevel":"none","matchedWords":[]}},"gitHead":{"value":"67c9e42973c90ed1fe3ac5274a355d94cf399bb8","matchLevel":"none","matchedWords":[]},"readme":{"value":"# <em>axios</em>\n\n[![npm version](https://img.shields.io/npm/v/<em>axios</em>.svg?style=flat-square)](https://www.npmjs.org/package/<em>axios</em>)\n[![build status](https://img.shields.io/travis/mzabriskie/<em>axios</em>.svg?style=flat-square)](https://travis-ci.org/mzabriskie/<em>axios</em>)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/<em>axios</em>.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/<em>axios</em>)\n[![npm downloads](https://img.shields.io/npm/dm/<em>axios</em>.svg?style=flat-square)](http://npm-stat.com/charts.html?package=<em>axios</em>)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/<em>axios</em>.svg?style=flat-square)](https://gitter.im/mzabriskie/<em>axios</em>)\n\nPromise based HTTP client for the browser and node.js\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest â | Latest â | Latest â | Latest â | Latest â | 8+ â |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/<em>axios</em>.svg)](https://saucelabs.com/u/<em>axios</em>)\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install <em>axios</em>\n```\n\nUsing bower:\n\n```bash\n$ bower install <em>axios</em>\n```\n\nUsing cdn:\n\n```html\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n## Example\n\nPerforming a `GET` request\n\n```js\n// Make a request for a user with a given ID\n<em>axios</em>.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n// Optionally the request above could also be done as\n<em>axios</em>.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming a `POST` request\n\n```js\n<em>axios</em>.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return <em>axios</em>.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return <em>axios</em>.get('/user/12345/permissions');\n}\n\n<em>axios</em>.all([getUserAccount(), getUserPermissions()])\n  .then(<em>axios</em>.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\n```\n\n## <em>axios</em> API\n\nRequests can be made by passing the relevant config to `<em>axios</em>`.\n\n##### <em>axios</em>(config)\n\n```js\n// Send a POST request\n<em>axios</em>({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n##### <em>axios</em>(url[, config])\n\n```js\n// Send a GET request (default method)\n<em>axios</em>('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### <em>axios</em>.request(config)\n##### <em>axios</em>.get(url[, config])\n##### <em>axios</em>.delete(url[, config])\n##### <em>axios</em>.head(url[, config])\n##### <em>axios</em>.post(url[, data[, config]])\n##### <em>axios</em>.put(url[, data[, config]])\n##### <em>axios</em>.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### <em>axios</em>.all(iterable)\n##### <em>axios</em>.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of <em>axios</em> with a custom config.\n\n##### <em>axios</em>.create([config])\n\n```js\nvar instance = <em>axios</em>.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### <em>axios</em>#request(config)\n##### <em>axios</em>#get(url[, config])\n##### <em>axios</em>#delete(url[, config])\n##### <em>axios</em>#head(url[, config])\n##### <em>axios</em>#post(url[, data[, config]])\n##### <em>axios</em>#put(url[, data[, config]])\n##### <em>axios</em>#patch(url[, data[, config]])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of <em>axios</em> to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // The last function in the array must return a string, an ArrayBuffer, FormData, or a Stream\n  transformRequest: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000,\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content allowed\n  maxContentLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows to configure options like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' defines the hostname and port of the proxy server\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing `Proxy-Authorization` custom headers you have set using `headers`.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the headers that the server responded with\n  headers: {},\n\n  // `config` is the config that was provided to `<em>axios</em>` for the request\n  config: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\n<em>axios</em>.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global <em>axios</em> defaults\n\n```js\n<em>axios</em>.defaults.baseURL = 'https://api.example.com';\n<em>axios</em>.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n<em>axios</em>.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nvar instance = <em>axios</em>.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in `lib/defaults.js`, then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nvar instance = <em>axios</em>.create();\n\n// Override timeout default for the library\n// Now all requests will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\n<em>axios</em>.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\n<em>axios</em>.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you may need to remove an interceptor later you can.\n\n```js\nvar myInterceptor = <em>axios</em>.interceptors.request.use(function () {/*...*/});\n<em>axios</em>.interceptors.request.eject(myInterceptor);\n```\n\nYou can add interceptors to a custom instance of <em>axios</em>.\n\n```js\nvar instance = <em>axios</em>.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n## Handling Errors\n\n```js\n<em>axios</em>.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made, but the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nYou can define a custom HTTP status code error range using the `validateStatus` config option.\n\n```js\n<em>axios</em>.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\n```\n\n## Cancellation\n\nYou can cancel a request using a *cancel token*.\n\n> The <em>axios</em> cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nvar CancelToken = <em>axios</em>.CancelToken;\nvar source = CancelToken.source();\n\n<em>axios</em>.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (<em>axios</em>.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nvar CancelToken = <em>axios</em>.CancelToken;\nvar cancel;\n\n<em>axios</em>.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> Note: you can cancel several requests with the same cancel token.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, <em>axios</em> serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\n<em>axios</em>.post('/foo', params); \n```\n\n> Note that `URLSearchParams` is not supported by all browsers, but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nvar qs = require('qs');\n<em>axios</em>.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n### Node.js\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nvar querystring = require('querystring');\n<em>axios</em>.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the `qs` library.\n\n## Semver\n\nUntil <em>axios</em> reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\n<em>axios</em> depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n<em>axios</em> includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport <em>axios</em> from '<em>axios</em>';\n<em>axios</em>.get('/user?ID=12345');\n```\n\n## Resources\n\n* [Changelog](https://github.com/mzabriskie/<em>axios</em>/blob/master/CHANGELOG.md)\n* [Upgrade Guide](https://github.com/mzabriskie/<em>axios</em>/blob/master/UPGRADE_GUIDE.md)\n* [Ecosystem](https://github.com/mzabriskie/<em>axios</em>/blob/master/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/mzabriskie/<em>axios</em>/blob/master/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/mzabriskie/<em>axios</em>/blob/master/CODE_OF_CONDUCT.md)\n\n## Credits\n\n<em>axios</em> is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately <em>axios</em> is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\nMIT\n","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]},"owner":{"name":{"value":"mzabriskie","matchLevel":"none","matchedWords":[]},"avatar":{"value":"https://github.com/mzabriskie.png","matchLevel":"none","matchedWords":[]},"link":{"value":"https://github.com/mzabriskie","matchLevel":"none","matchedWords":[]}},"license":{"value":"MIT","matchLevel":"none","matchedWords":[]},"keywords":[{"value":"xhr","matchLevel":"none","matchedWords":[]},{"value":"http","matchLevel":"none","matchedWords":[]},{"value":"ajax","matchLevel":"none","matchedWords":[]},{"value":"promise","matchLevel":"none","matchedWords":[]},{"value":"node","matchLevel":"none","matchedWords":[]}],"lastPublisher":{"name":{"value":"torworx","matchLevel":"none","matchedWords":[]},"email":{"value":"torworx@gmail.com","matchLevel":"none","matchedWords":[]},"avatar":{"value":"https://gravatar.com/avatar/c8ea71a3c689dc1971a160dbd169d829","matchLevel":"none","matchedWords":[]},"link":{"value":"https://www.npmjs.com/~torworx","matchLevel":"none","matchedWords":[]}},"owners":[{"email":{"value":"torworx@gmail.com","matchLevel":"none","matchedWords":[]},"name":{"value":"bitt","matchLevel":"none","matchedWords":[]},"avatar":{"value":"https://gravatar.com/avatar/c8ea71a3c689dc1971a160dbd169d829","matchLevel":"none","matchedWords":[]},"link":{"value":"https://www.npmjs.com/~bitt","matchLevel":"none","matchedWords":[]}}],"lastCrawl":{"value":"2018-07-19T11:44:59.576Z","matchLevel":"none","matchedWords":[]},"_searchInternal":{"concatenatedName":{"value":"<em>axios</em>2","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]},"alternativeNames":[{"value":"<em>axios</em>2","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]},{"value":"<em>axios</em>2","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]},{"value":"<em>axios</em>2","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]}]},"humanDependents":{"value":"0","matchLevel":"none","matchedWords":[]},"changelogFilename":{"value":"https://raw.githubusercontent.com/mzabriskie/<em>axios</em>/67c9e42973c90ed1fe3ac5274a355d94cf399bb8/CHANGELOG.md","matchLevel":"full","fullyHighlighted":false,"matchedWords":["axios"]}}}}},"lambdaId":"a046149a-d8c9-4997-ad68-245f26ca477f"},"PROJECT_META":{"projectName":"FreeF","projectDescription":"freef","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"FreeF","repoUrl":"https://github.com/rahi9208/FreeF","lastSave":1532068253628}}